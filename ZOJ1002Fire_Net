#include <iostream>
#include <stdio.h>
int n, res = 0, maxcount = 0;  //n为矩阵维度 res为最终结果 maxcount为临时变量
char a[6][6];
using namespace std;
bool is_legal(int i, int j);  //判断a[i][j]是否合法，即是否可以放置碉堡
void DFS();  //核心DFS算法
int main()
{
	while (cin >> n && n)
	{
		res = 0;
		maxcount = 0;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
				cin>>a[i][j];
		}
		DFS();   
		cout << res << endl;
	}
  return 0;
}

bool is_legal(int i, int j)   
{
	for (int h = i - 1; h >= 0; h--)     //上
	{
		if (a[h][j] == 'o')
		{
			return false;
		}
		if (a[h][j] == 'X')
		{
			break;
		}
	}
	for (int k = j - 1; k >= 0; k--)    //左
	{
		if (a[i][k] == 'o')
		{
			return false;
		}
		if (a[i][k] == 'X')
		{
			break;
		}
	}
	for (int h = i + 1; h < n; h++)     //下
	{
		if (a[h][j] == 'o')
		{
			return false;
		}
		if (a[h][j] == 'X')
		{
			break;
		}
	}
	for (int k = j + 1; k < n; k++)    //右
	{
		if (a[i][k] == 'o')
		{
			return false;
		}
		if (a[i][k] == 'X')
		{
			break;
		}
	}
	return true;
}
void DFS()   
{
		if (maxcount > res)
		{
			res = maxcount;
		}
		for (int j = 0; j < n; j++)    //元素全扫描，即穷举法
		{
			for (int k = 0; k < n; k++)
			{
				if (a[j][k] == '.' && is_legal(j, k))   //判断是否合法
				{
					a[j][k] = 'o';  //标记该点已经使用
					maxcount += 1;   // 求解目标（前进一步） + 1
					DFS();
					a[j][k] = '.';   //清楚标记
					maxcount -= 1;	 //求解目标（后退一步） - 1
				}
			}
		}
}
